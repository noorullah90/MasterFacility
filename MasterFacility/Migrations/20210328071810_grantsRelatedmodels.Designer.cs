// <auto-generated />
using System;
using MasterFacility.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MasterFacility.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210328071810_grantsRelatedmodels")]
    partial class grantsRelatedmodels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MasterFacility.Data.Models.AuditLog.audit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("affectedcolumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("newvalues")
                        .HasColumnType("text");

                    b.Property<string>("oldvalues")
                        .HasColumnType("text");

                    b.Property<string>("primarykey")
                        .HasColumnType("text");

                    b.Property<string>("tablename")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<int>("userid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("auditlogs");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facility", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("closeddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("dateestablished")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("districtid")
                        .HasColumnType("integer");

                    b.Property<int>("facilitystatusid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("facilitytypestartdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("facilityypeid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("lastupdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("latitude")
                        .HasColumnType("numeric");

                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<string>("locationdari")
                        .HasColumnType("text");

                    b.Property<decimal>("longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("namedari")
                        .HasColumnType("text");

                    b.Property<string>("namepashto")
                        .HasColumnType("text");

                    b.Property<DateTime>("registrationdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("shortname")
                        .HasColumnType("text");

                    b.Property<string>("shortnamedari")
                        .HasColumnType("text");

                    b.Property<string>("shortnamepashto")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("districtid");

                    b.ToTable("facility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilitycontact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<int>("facilityid")
                        .HasColumnType("integer");

                    b.Property<string>("fullname")
                        .HasColumnType("text");

                    b.Property<bool>("iscurrent")
                        .HasColumnType("boolean");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<int>("positionid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.ToTable("facilitycontact");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilitydataset", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("datasetid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("facilityid")
                        .HasColumnType("integer");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.ToTable("facilitydataset");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilityhumanresources", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("facilityid")
                        .HasColumnType("integer");

                    b.Property<int>("numberofworkers")
                        .HasColumnType("integer");

                    b.Property<int>("positionid")
                        .HasColumnType("integer");

                    b.Property<int>("sequencenumber")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.ToTable("facilityhumanresources");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.grantfacility", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("facilityid")
                        .HasColumnType("integer");

                    b.Property<string>("grantcode")
                        .HasColumnType("text");

                    b.Property<int>("grantid")
                        .HasColumnType("integer");

                    b.Property<bool>("iscurrent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.HasIndex("grantcode");

                    b.ToTable("grantfacility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.privatefacilitylicense", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("facilityid")
                        .HasColumnType("integer");

                    b.Property<int>("numberofbeds")
                        .HasColumnType("integer");

                    b.Property<string>("ownerfathername")
                        .HasColumnType("text");

                    b.Property<string>("ownername")
                        .HasColumnType("text");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("facilityid");

                    b.ToTable("privatefacilitylicense");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.donor", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<int>("donortypeid")
                        .HasColumnType("integer");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("namedari")
                        .HasColumnType("text");

                    b.Property<string>("namepashto")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("donors");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.grant", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("implementerid")
                        .HasColumnType("integer");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("programcode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("code");

                    b.HasIndex("implementerid");

                    b.HasIndex("programcode");

                    b.ToTable("grants");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.implementers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("abbreviation")
                        .HasColumnType("text");

                    b.Property<string>("afghanistanaddress")
                        .HasColumnType("text");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("namedari")
                        .HasColumnType("text");

                    b.Property<string>("namepashto")
                        .HasColumnType("text");

                    b.Property<string>("otheraddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("registerationdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("website")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("implementers");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.programs", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("donorcode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("namedari")
                        .HasColumnType("text");

                    b.Property<string>("namepashto")
                        .HasColumnType("text");

                    b.Property<DateTime?>("startdate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("code");

                    b.HasIndex("donorcode");

                    b.ToTable("programs");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Identity.UserGrantedProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGrantedProvinces");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.district", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namedari")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namepashto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("provinceid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("provinceid");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.lookup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namedari")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namepashto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("lookups");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.lookupitem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("hmisid")
                        .HasColumnType("text");

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<int>("lookupid")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namedari")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namepashto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("order")
                        .HasColumnType("integer");

                    b.Property<int?>("parentid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("lookupid");

                    b.HasIndex("parentid");

                    b.ToTable("lookupitems");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.province", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("isactive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namedari")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("namepashto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("MasterFacility.Models.Lookups.language", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facility", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Lookups.district", "district")
                        .WithMany("facilities")
                        .HasForeignKey("districtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("district");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilitycontact", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Facility.facility", "facility")
                        .WithMany("contacts")
                        .HasForeignKey("facilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilitydataset", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Facility.facility", "facility")
                        .WithMany("datasets")
                        .HasForeignKey("facilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facilityhumanresources", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Facility.facility", "facility")
                        .WithMany("humanresources")
                        .HasForeignKey("facilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.grantfacility", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Facility.facility", "facility")
                        .WithMany("grantfacilities")
                        .HasForeignKey("facilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterFacility.Data.Models.Grants.grant", "grant")
                        .WithMany()
                        .HasForeignKey("grantcode");

                    b.Navigation("facility");

                    b.Navigation("grant");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.privatefacilitylicense", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Facility.facility", "facility")
                        .WithMany("privatefacilitylicenses")
                        .HasForeignKey("facilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facility");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.grant", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Grants.implementers", "implementer")
                        .WithMany("grants")
                        .HasForeignKey("implementerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterFacility.Data.Models.Grants.programs", "program")
                        .WithMany("grants")
                        .HasForeignKey("programcode");

                    b.Navigation("implementer");

                    b.Navigation("program");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.programs", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Grants.donor", "donor")
                        .WithMany("programs")
                        .HasForeignKey("donorcode");

                    b.Navigation("donor");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Identity.UserGrantedProvince", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Lookups.province", "Province")
                        .WithMany("GrantedProvinces")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterFacility.Data.Models.Identity.AppUser", "User")
                        .WithMany("GrantedProvinces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.district", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Lookups.province", "province")
                        .WithMany("districts")
                        .HasForeignKey("provinceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.lookupitem", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Lookups.lookup", "lookup")
                        .WithMany("lookupitems")
                        .HasForeignKey("lookupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterFacility.Data.Models.Lookups.lookupitem", "parent")
                        .WithMany("lookupitems")
                        .HasForeignKey("parentid");

                    b.Navigation("lookup");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterFacility.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MasterFacility.Data.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Facility.facility", b =>
                {
                    b.Navigation("contacts");

                    b.Navigation("datasets");

                    b.Navigation("grantfacilities");

                    b.Navigation("humanresources");

                    b.Navigation("privatefacilitylicenses");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.donor", b =>
                {
                    b.Navigation("programs");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.implementers", b =>
                {
                    b.Navigation("grants");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Grants.programs", b =>
                {
                    b.Navigation("grants");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Identity.AppUser", b =>
                {
                    b.Navigation("GrantedProvinces");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.district", b =>
                {
                    b.Navigation("facilities");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.lookup", b =>
                {
                    b.Navigation("lookupitems");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.lookupitem", b =>
                {
                    b.Navigation("lookupitems");
                });

            modelBuilder.Entity("MasterFacility.Data.Models.Lookups.province", b =>
                {
                    b.Navigation("districts");

                    b.Navigation("GrantedProvinces");
                });
#pragma warning restore 612, 618
        }
    }
}
